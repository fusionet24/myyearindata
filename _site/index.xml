<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>MyYearInData</title>
<link>MyYearindata.com/index.html</link>
<atom:link href="MyYearindata.com/index.xml" rel="self" type="application/rss+xml"/>
<description>Exploration and analysis of Technical topics in the world of data</description>
<generator>quarto-1.0.36</generator>
<lastBuildDate>Fri, 28 Oct 2022 23:00:00 GMT</lastBuildDate>
<item>
  <title>Handling UK Bank Holidays in Azure Data Factory & Synapse</title>
  <dc:creator>Scott Bell</dc:creator>
  <link>MyYearindata.com/posts/handling-uk-bank-holidays-in-adf-pipelines/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Sometimes you have processes that you don’t need to run in certain scenarios. The past year I’ve been working with market trading data. Trading in exchanges happens every weekday but they don’t happen on weekends or national holidays as they’re usually closed.</p>
<p>This posses a problem to usual ADF trigger patterns where you can <a href="https://learn.microsoft.com/en-us/azure/data-factory/how-to-create-schedule-trigger?tabs=data-factory">schedule quite complex trigger</a>scenarios such as the 1st Sunday of every month. However, no concept of national holidays exist, so we need to handle this after the trigger point.</p>
</section>
<section id="problem" class="level2">
<h2 class="anchored" data-anchor-id="problem">Problem</h2>
<p>So lets restate the problem within the context of ADF. We need to trigger our process everyday, then <strong>we must validate whether this date is a UK Bank Holiday</strong> and run the business logic.</p>
</section>
<section id="solution" class="level2">
<h2 class="anchored" data-anchor-id="solution">Solution</h2>
<section id="government-api" class="level3">
<h3 class="anchored" data-anchor-id="government-api">Government API</h3>
<p>The UK government have started to build a <a href="https://www.api.gov.uk/#uk-public-sector-apis">useful catalog of APIs</a> for consumption, one of which <a href="https://www.gov.uk/bank-holidays.json">contains all public holidays</a>. The api returns the following json data.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">curl</span> <span class="st" style="color: #20794D;">'https://www.gov.uk/bank-holidays.json'</span></span></code></pre></div>
<p>The schema can be broken down into having two key pieces of information:</p>
<ol type="1">
<li>The applicable country with the values <strong>england-and-wales</strong>, <strong>scotland</strong> &amp; <strong>northern-ireland</strong> at the root level.</li>
<li>An array of <strong>Events</strong> that contains several properties such as <strong>Title</strong> (the Holiday’s Name) and <strong>Date</strong></li>
</ol>
</section>
<section id="adf-pipeline" class="level3">
<h3 class="anchored">ADF Pipeline</h3>
<p>So our goal is to select the appropriate region for our data and then to filter the dates to validate our input date doesn’t match any of the ones listed in the above API.</p>
<p>Our final pipeline will look like this consisting of 3 activities and parameterised so it can be reused as a child pipeline in wider orchestration flows. The code for this is re-produced at the bottom.</p>
<p><img src="MyYearindata.com/posts/handling-uk-bank-holidays-in-adf-pipelines/images/paste-A1FC2AE6.png" class="img-fluid"></p>
<p>First we need to setup our pipeline with the <strong>parameters</strong> and <strong>variables</strong>.</p>
<p>We need to configure a parameter to accept a date input which could be from a parent process or trigger. We have called this <strong>date</strong><img src="MyYearindata.com/posts/handling-uk-bank-holidays-in-adf-pipelines/images/paste-9AFC4B75.png" class="img-fluid"></p>
<p>Next we need a variable called <strong>BankHoliday</strong> to store the outcome of the question Is It a Bank Holiday for this date?</p>
<p><img src="MyYearindata.com/posts/handling-uk-bank-holidays-in-adf-pipelines/images/paste-C372187F.png" class="img-fluid"></p>
<ol type="1">
<li><p>A <a href="https://learn.microsoft.com/en-us/azure/data-factory/control-flow-web-activity">web activity</a> which calls the <a href="https://www.gov.uk/bank-holidays.json"><em>https://www.gov.uk/bank-holidays.json</em></a>endpoint. It is configured like so <img src="MyYearindata.com/posts/handling-uk-bank-holidays-in-adf-pipelines/images/paste-5AD2F23F.png" class="img-fluid"></p>
<p>The output of this should look like<img src="MyYearindata.com/posts/handling-uk-bank-holidays-in-adf-pipelines/images/paste-9C5CE0F1.png" class="img-fluid"></p></li>
<li><p>The <a href="https://learn.microsoft.com/en-us/azure/data-factory/control-flow-filter-activity">Filter Activity</a> allows use to iterate through that events array and find matching items.</p>
<p><img src="MyYearindata.com/posts/handling-uk-bank-holidays-in-adf-pipelines/images/paste-A81B4DAB.png" class="img-fluid"></p>
<p>We must first define our items. <strong>I’ve manually selected the england-and-wales events</strong> but this <em>could easily be made to be dynamic</em> and extended to other regions on demand. The ADF expression for Items is</p>
<p><code>{.adf expression .adf}  @activity('Get Bank Holidays').output['england-and-wales']['events']</code></p>
<p>The conditions we will use to filter these selected items is</p>
<p><code>{.adf expression .adf} @contains(item().date, formatDateTime(pipeline().parameters.date,'yyyy-MM-dd'))</code></p>
<p>We check that the item contains the parameter date. We reformat the input date to ensure there are no inconsistencies in the comparison. e.g.&nbsp;yyyy-mm-DD != mm-yyyy-dd</p>
<p>Which outputs the following structure:</p>
<ul>
<li><p>ItemsCount - The Number of items we searched to try and find a match</p></li>
<li><p>FilteredItemsCount - The Number of Matches we found for said date</p></li>
<li><p>Value - An Array of Matches for Said Date</p></li>
</ul>
<p>An example of our code when we don’t find a match using the date of 2021-07-07.</p>
<p><img src="MyYearindata.com/posts/handling-uk-bank-holidays-in-adf-pipelines/images/paste-2E3E8869.png" class="img-fluid"></p>
<p>An example of a successful match using the date of 2021-04-05 which is Easter Monday in the UK!</p>
<p><img src="MyYearindata.com/posts/handling-uk-bank-holidays-in-adf-pipelines/images/paste-C7DA67B7.png" class="img-fluid"></p>
<p>You will notice that FilteredItemsCount has incremented which is the property we will use in the next activity.</p></li>
<li><p>So now we have found our matches or not, now <strong>we need to set our variable to answer the question</strong>! We will use a <a href="https://learn.microsoft.com/en-us/azure/data-factory/control-flow-set-variable-activity">set variable activity</a>. Our logic should be pretty simple, <strong>does the FilteredItemCount = 1</strong></p>
<p><img src="MyYearindata.com/posts/handling-uk-bank-holidays-in-adf-pipelines/images/paste-BC254285.png" class="img-fluid"></p>
<p>The ADF expression looks like</p>
<p><code>{.adf expression .adf} @equals(activity('Search Bank Holidays').output.FilteredItemsCount,1)</code></p>
<h2 id="conclusion" class="anchored" data-anchor-id="adf-pipeline">Conclusion</h2>
<p>Now you have a Azure Data Factory pipeline that can calculate whether a given day is a United Kingdom Bank Holiday Or Regional Bank Holiday (Wales, Scotland or Northern Ireland).</p></li>
</ol>
</section>
</section>
<section id="code" class="level2">
<h2 class="anchored" data-anchor-id="code">Code</h2>
<script src="https://gist.github.com/fusionet24/d809cd620dca3080806e11407ced0429.js"></script>


</section>

 ]]></description>
  <category>azure</category>
  <category>adf</category>
  <category>data factory</category>
  <category>api</category>
  <category>Synapse</category>
  <guid>MyYearindata.com/posts/handling-uk-bank-holidays-in-adf-pipelines/index.html</guid>
  <pubDate>Fri, 28 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="MyYearindata.com/posts/handling-uk-bank-holidays-in-adf-pipelines/images/paste-A1FC2AE6.png" medium="image" type="image/png" height="31" width="144"/>
</item>
<item>
  <title>Using Dynamic column metadata from sp_columns in ADF (to ignore calculated columns) while using copy activities</title>
  <dc:creator>Scott Bell</dc:creator>
  <link>MyYearindata.com/posts/spcolumns-metadata-activities-in-data-factory-copy-activities-and-calculated-columns/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Recently, I encountered an issue where we had to copy data from one Azure SQL database to another using Azure Data Factory (ADF) V2. The entire process was dynamic using parameters to select a table to be copied to the target database. A simple enough problem, right?</p>
<p>Well no, firstly the table definition existed in the target DB, which given that it was a direct copy of the data shouldn’t pose a problem. However, <strong>the table definition contained</strong> <a href="https://learn.microsoft.com/en-us/sql/relational-databases/tables/specify-computed-columns-in-a-table?view=sql-server-ver16">calculated columns</a> <strong>to capture the date of ingestion</strong>.</p>
</section>
<section id="problem" class="level2">
<h2 class="anchored" data-anchor-id="problem">Problem</h2>
<blockquote class="blockquote">
<p>So now the problem becomes, <strong>“How do I exclude columns from an ADF Copy Activity based upon their metadata properties?”</strong></p>
</blockquote>
<p>The first thing that comes to mind is <a href="https://learn.microsoft.com/en-us/azure/data-factory/connector-azure-sql-database?tabs=data-factory#getmetadata-activity-properties">GET Metadata activity in ADF</a>. Sadly that doesn’t have sufficient detail about the column definitions.</p>
<p>The next thought was the <a href="https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-columns-transact-sql?view=sql-server-ver16">stored procedure sp_columns</a> which returns metadata about columns and is a tool I’d imagine almost all data engineers use in the their SQL development workflow. So that’s what I did, using the (relatively) new <a href="https://learn.microsoft.com/en-us/azure/data-factory/transform-data-using-script">script activity</a> in ADF.</p>
</section>
<section id="solution" class="level2">
<h2 class="anchored" data-anchor-id="solution">Solution</h2>
<p>The pipeline used to achieve this can be found at the bottom of this post for reference. (note linked services and datasets etc are omitted)</p>
<p>The pipeline has 3 main components:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="MyYearindata.com/posts/spcolumns-metadata-activities-in-data-factory-copy-activities-and-calculated-columns/adf-pipeline-archotecture.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">ADF Pipeline Architecture</figcaption><p></p>
</figure>
</div>
<ol type="1">
<li>The Script Activity which takes the pipeline parameter and concats sp_columns with it to retrieve table metadata like <code>@concat('sp_columns ',pipeline().parameters.param_table)</code></li>
</ol>
<p>The resulting output is json that has the following structure</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb1-1"><span class="fu" style="color: #4758AB;">{</span></span>
<span id="cb1-2">    <span class="dt" style="color: #AD0000;">"resultSetCount"</span><span class="fu" style="color: #4758AB;">:</span> <span class="dv" style="color: #AD0000;">1</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-3">    <span class="dt" style="color: #AD0000;">"recordsAffected"</span><span class="fu" style="color: #4758AB;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-4">    <span class="dt" style="color: #AD0000;">"resultSets"</span><span class="fu" style="color: #4758AB;">:</span> <span class="ot" style="color: #003B4F;">[</span></span>
<span id="cb1-5">        <span class="fu" style="color: #4758AB;">{</span></span>
<span id="cb1-6">            <span class="dt" style="color: #AD0000;">"rowCount"</span><span class="fu" style="color: #4758AB;">:</span> <span class="er" style="color: #AD0000;">&lt;INT&gt;</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-7">            <span class="dt" style="color: #AD0000;">"rows"</span><span class="fu" style="color: #4758AB;">:</span> <span class="ot" style="color: #003B4F;">[</span></span>
<span id="cb1-8">                <span class="fu" style="color: #4758AB;">{</span></span>
<span id="cb1-9">                    <span class="dt" style="color: #AD0000;">"TABLE_QUALIFIER"</span><span class="fu" style="color: #4758AB;">:</span> <span class="er" style="color: #AD0000;">&lt;DATABASE&gt;</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-10">                    <span class="dt" style="color: #AD0000;">"TABLE_OWNER"</span><span class="fu" style="color: #4758AB;">:</span> <span class="er" style="color: #AD0000;">&lt;SCHEMA&gt;</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-11">                    <span class="dt" style="color: #AD0000;">"TABLE_NAME"</span><span class="fu" style="color: #4758AB;">:</span> <span class="er" style="color: #AD0000;">&lt;TABLE_NAME&gt;</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-12">                    <span class="dt" style="color: #AD0000;">"COLUMN_NAME"</span><span class="fu" style="color: #4758AB;">:</span> <span class="er" style="color: #AD0000;">&lt;COLUMN_NAME&gt;</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-13">                    <span class="dt" style="color: #AD0000;">"DATA_TYPE"</span><span class="fu" style="color: #4758AB;">:</span> <span class="dv" style="color: #AD0000;">4</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-14">                    <span class="dt" style="color: #AD0000;">"TYPE_NAME"</span><span class="fu" style="color: #4758AB;">:</span> <span class="st" style="color: #20794D;">"int"</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-15">                    <span class="dt" style="color: #AD0000;">"PRECISION"</span><span class="fu" style="color: #4758AB;">:</span> <span class="dv" style="color: #AD0000;">10</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-16">                    <span class="dt" style="color: #AD0000;">"LENGTH"</span><span class="fu" style="color: #4758AB;">:</span> <span class="dv" style="color: #AD0000;">4</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-17">                    <span class="dt" style="color: #AD0000;">"SCALE"</span><span class="fu" style="color: #4758AB;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-18">                    <span class="dt" style="color: #AD0000;">"RADIX"</span><span class="fu" style="color: #4758AB;">:</span> <span class="dv" style="color: #AD0000;">10</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-19">                    <span class="dt" style="color: #AD0000;">"NULLABLE"</span><span class="fu" style="color: #4758AB;">:</span> <span class="dv" style="color: #AD0000;">0</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-20">                    <span class="dt" style="color: #AD0000;">"REMARKS"</span><span class="fu" style="color: #4758AB;">:</span> <span class="kw" style="color: #003B4F;">null</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-21">                    <span class="dt" style="color: #AD0000;">"COLUMN_DEF"</span><span class="fu" style="color: #4758AB;">:</span> <span class="kw" style="color: #003B4F;">null</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-22">                    <span class="dt" style="color: #AD0000;">"SQL_DATA_TYPE"</span><span class="fu" style="color: #4758AB;">:</span> <span class="dv" style="color: #AD0000;">4</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-23">                    <span class="dt" style="color: #AD0000;">"SQL_DATETIME_SUB"</span><span class="fu" style="color: #4758AB;">:</span> <span class="kw" style="color: #003B4F;">null</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-24">                    <span class="dt" style="color: #AD0000;">"CHAR_OCTET_LENGTH"</span><span class="fu" style="color: #4758AB;">:</span> <span class="kw" style="color: #003B4F;">null</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-25">                    <span class="dt" style="color: #AD0000;">"ORDINAL_POSITION"</span><span class="fu" style="color: #4758AB;">:</span> <span class="dv" style="color: #AD0000;">1</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-26">                    <span class="dt" style="color: #AD0000;">"IS_NULLABLE"</span><span class="fu" style="color: #4758AB;">:</span> <span class="st" style="color: #20794D;">"NO"</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb1-27">                    <span class="dt" style="color: #AD0000;">"SS_DATA_TYPE"</span><span class="fu" style="color: #4758AB;">:</span> <span class="dv" style="color: #AD0000;">56</span></span>
<span id="cb1-28">                <span class="fu" style="color: #4758AB;">}</span><span class="ot" style="color: #003B4F;">,</span></span>
<span id="cb1-29">                <span class="fu" style="color: #4758AB;">{</span><span class="er" style="color: #AD0000;">&lt;continued</span> <span class="er" style="color: #AD0000;">for</span> <span class="er" style="color: #AD0000;">every</span> <span class="er" style="color: #AD0000;">column.</span> <span class="er" style="color: #AD0000;">...&gt;</span><span class="fu" style="color: #4758AB;">}</span> <span class="er" style="color: #AD0000;">}</span></span>
<span id="cb1-30">    <span class="ot" style="color: #003B4F;">]</span></span>
<span id="cb1-31"><span class="fu" style="color: #4758AB;">}</span></span></code></pre></div>
<p><strong>Note :</strong>the other metadata here so this approach may have merits for other column property driven processes you need in ADF.</p>
<p>For our uses we should focus on the <strong>COLUMN_DEF</strong> property which should this be a computed column then <strong>would contain an expression and not be null!</strong></p>
<ol start="2" type="1">
<li>For each entry in resultsSets[0].rows we need to iterate through them and find every column where no column_def exists which will allow us to only include the relevant columns. For this purpose we have created a pipeline variable called <em>selected_columns</em> of type array. We pass that into the items property to iterate <code>@activity('Get Column Metadata').output.resultSets[0].rows</code></li>
</ol>
<p>Inside the for each we have an If statement that checks the above condition <code>@equals(item().COLUMN_DEF, null)</code> and returns true when column def is null. Which then uses the <a href="https://learn.microsoft.com/en-us/azure/data-factory/control-flow-append-variable-activity">append variable activity</a> to <strong>add the column to our selected_columns array</strong></p>
<p><img src="MyYearindata.com/posts/spcolumns-metadata-activities-in-data-factory-copy-activities-and-calculated-columns/adf-for-each-activity-detail.png" class="img-fluid"></p>
<ol start="3" type="1">
<li>Finally, we that in our copy activity to build a dynamic select query by converting the array to a , separated string with the <a href="https://learn.microsoft.com/en-us/azure/data-factory/control-flow-expression-language-functions">join() function</a>. Our ADF expression looks like <code>@concat('select ', join(variables('selected_columns'),','), ' from ', pipeline().parameters.param_table)</code></li>
</ol>
<p><img src="MyYearindata.com/posts/spcolumns-metadata-activities-in-data-factory-copy-activities-and-calculated-columns/adf-copy-activity-query.png" class="img-fluid"></p>
</section>
<section id="code" class="level2">
<h2 class="anchored" data-anchor-id="code">Code</h2>
<script src="https://gist.github.com/fusionet24/9de7963439d117c96a82c34054277a37.js"></script>


</section>

 ]]></description>
  <category>azure</category>
  <category>adf</category>
  <category>data factory</category>
  <category>sql</category>
  <guid>MyYearindata.com/posts/spcolumns-metadata-activities-in-data-factory-copy-activities-and-calculated-columns/index.html</guid>
  <pubDate>Sun, 23 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="MyYearindata.com/posts/spcolumns-metadata-activities-in-data-factory-copy-activities-and-calculated-columns/adf-pipeline-archotecture.png" medium="image" type="image/png" height="68" width="144"/>
</item>
<item>
  <title>Back to the Data</title>
  <dc:creator>Scott Bell</dc:creator>
  <link>MyYearindata.com/posts/welcome/index.html</link>
  <description><![CDATA[ 




<p>Welcome back to a long overdue blog rebuild. I’ve attempted to rebuild this blog 3 times so far in the last 3 years. So finally I have finished it (if you’re reading this).</p>
<p>A lot has happened in the last few years but first I want to just get on with writing code and analysing data.</p>
<p>If you’re not familar yet, I run a (sometimes daily) Databricks Tips, tricks and hacks twitter account. That is followed by quite a few databricks people. I would recommend following it or signing up the even less frequent newsletter :)</p>



 ]]></description>
  <category>news</category>
  <guid>MyYearindata.com/posts/welcome/index.html</guid>
  <pubDate>Thu, 22 Sep 2022 23:00:00 GMT</pubDate>
</item>
</channel>
</rss>
